image: fedora:30

variables:
  #ATLAS_LOCAL_ROOT_BASE: /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SSL_NO_VERIFY: "true"
  SRC_DIR: src
  BUILD_DIR: build
  SRC_DIR_ABS: "${CI_PROJECT_DIR}/${SRC_DIR}"
  BUILD_DIR_ABS: "${CI_PROJECT_DIR}/${BUILD_DIR}"
  LD_LIBRARY_PATH: "/usr/local/lib"
  PYTHONPATH: "/usr/local/lib64/python2.7/site-packages"


stages:
- compile
- check
- validate

before_script:
- dnf update -y
- dnf install -y make cmake gcc-c++ gcc-gfortran redhat-rpm-config m4 automake autoconf libtool
- dnf install -y wget tar less bzip2 findutils which nano zlib-devel git rsync
- dnf install -y python python-devel python-requests file python-matplotlib  gsl-devel
- dnf install -y texlive-latex-bin texlive-texconfig-bin texlive-pst-tools texlive-pst-arrow
- dnf install -y ghostscript ImageMagick texlive-dvips texlive-relsize
- dnf install -y texlive-cm texlive-hyphen-base texlive-collection-fontsrecommended
# The HepM3 from EPEL/Fedora is validated on regular basis.
- dnf install -y HepMC3 HepMC3-devel HepMC3-search HepMC3-search-devel
- dnf clean all





#prep:
#  stage: .pre
#  except:
#    - schedules
#  script:
#    - cd ..
#    - BUILD_PREFIX="$PWD"
#    - INSTALL_PREFIX="${CI_PROJECT_DIR}/local"
#    - MAKE="make -j3"
#    - export CPPFLAGS="$CPPFLAGS -DNDEBUG"
#    # versions
#    - test -z "$HEPMC_VERSION" && HEPMC_VERSION="2.06.10" #< TODO: update to v3
#    - test -z "$FASTJET_VERSION" && FASTJET_VERSION="3.3.3"
#    - test -z "$FJCONTRIB_VERSION" && FJCONTRIB_VERSION="1.042"
#    - test -z "$CYTHON_VERSION" && CYTHON_VERSION="0.29.15"
#    # immediate exit on a command (group) failure and optional debug mode
#    - set -e
#    - export PATH=$INSTALL_PREFIX/bin:$PATH
#    - function conf { ./configure --prefix=$INSTALL_PREFIX "$@"; }
#    - function mmi { $MAKE "$@" && $MAKE install; }
#    - function wget_untar { wget --no-check-certificate $1 -O- | tar --no-same-owner -xz; }
#    - mkdir -p $INSTALL_PREFIX/etc/bash_completion.d
#    # install hepmc
#    - echo "INSTALLING HEPMC $HEPMC_VERSION"
#    - cd $BUILD_PREFIX
#    - test -d HepMC-$HEPMC_VERSION || wget_untar http://hepmc.web.cern.ch/hepmc/releases/hepmc$HEPMC_VERSION.tgz
#    - mkdir -p HepMC-$HEPMC_VERSION-build && cd HepMC-$HEPMC_VERSION-build
#    - cmake ../HepMC-$HEPMC_VERSION/ -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -Dmomentum=GEV -Dlength=MM
#    - mmi
#    - HEPMCPATH=$INSTALL_PREFIX
#    # install fastjet
#    - echo "INSTALLING FASTJET $FASTJET_VERSION"
#    - cd $BUILD_PREFIX
#    - test -d fastjet-$FASTJET_VERSION || wget_untar http://www.fastjet.fr/repo/fastjet-$FASTJET_VERSION.tar.gz
#    - cd fastjet-$FASTJET_VERSION
#    - conf --enable-shared --disable-auto-ptr --enable-allcxxplugins
#    - mmi
#    - FASTJETPATH=$INSTALL_PREFIX
#    # install fjcontrib
#    - echo "INSTALLING FASTJET CONTRIB $FJCONTRIB_VERSION"
#    - cd $BUILD_PREFIX
#    - test -d fastjet-$FJCONTRIB_VERSION || wget_untar http://fastjet.hepforge.org/contrib/downloads/fjcontrib-$FJCONTRIB_VERSION.tar.gz
#    - cd fjcontrib-$FJCONTRIB_VERSION
#    - ./configure --fastjet-config=$FASTJETPATH/bin/fastjet-config CXXFLAGS=-fPIC # fastjet-config already contains INSTALL_PREFIX
#    - mmi fragile-shared-install
#    # install cython
#    - echo "INSTALLING CYTHON $CYTHON_VERSION"
#    - cd $BUILD_PREFIX
#    - CYTHON_VERSION=0.28.5
#    - test -d cython-$CYTHON_VERSION || { wget https://github.com/cython/cython/archive/$CYTHON_VERSION.tar.gz -O - | tar xz; }
#    - export PATH=$BUILD_PREFIX/cython-$CYTHON_VERSION/bin:$PATH
#    - export PYTHONPATH=$BUILD_PREFIX/cython-$CYTHON_VERSION:$PYTHONPATH
#    # install dev yoda
#    - echo "INSTALLING DEV YODA"
#    - cd $BUILD_PREFIX
#    - test -d yoda || git clone https://gitlab.com/hepcedar/yoda.git yoda
#    - cd yoda
#    - git checkout origin/release-1-8
#    - autoreconf -i
#    - conf $YODA_CONFFLAGS
#    - mmi
#    - cp yodaenv.sh $INSTALL_PREFIX/yodaenv.sh
#    - echo "DEPENDENCIES BUILT SUCCESSFULLY."
#    - cd ${CI_PROJECT_DIR}
#    - tar czf local.tar.gz local
#  artifacts:
#    paths:
#      - local.tar.gz
#    expire_in: 1 week

build:
  stage: compile
  except:
    - schedules
  script:
    - cd ..
    - BUILD_PREFIX="$PWD"
    - INSTALL_PREFIX="${CI_PROJECT_DIR}/local"
    - MAKE="make -j3"
    - export CPPFLAGS="$CPPFLAGS -DNDEBUG"
    # immediate exit on a command (group) failure and optional debug mode
    - set -e
    - export PATH=$INSTALL_PREFIX/bin:$PATH
    - function conf { ./configure --prefix=$INSTALL_PREFIX "$@"; }
    - function mmi { $MAKE check "$@" && $MAKE install; }
    - function wget_untar { wget --no-check-certificate $1 -O- | tar --no-same-owner -xz; }
    - cd ${CI_PROJECT_DIR}
    # download pre-installed versions of HepMC2, FASTJET, FJcontrib and YODA
    #- wget_untar https://rivetval.web.cern.ch/rivetval/CI/FEDORA-30_HEPMC-2.06.10_FASTJET-3.3.3_FJCONTRIB-1.042_YODA-1-8-status2020-04-13.tar.gz
    # alternative download location:
    - wget_untar https://cgutscho.web.cern.ch/cgutscho/FEDORA-30_HEPMC-2.06.10_FASTJET-3.3.3_FJCONTRIB-1.042_YODA-1-8-status2020-04-13.tar.gz
    # install cython
    - echo "INSTALLING CYTHON $CYTHON_VERSION"
    - cd $BUILD_PREFIX
    - CYTHON_VERSION=0.28.5
    - test -d cython-$CYTHON_VERSION || { wget https://github.com/cython/cython/archive/$CYTHON_VERSION.tar.gz -O - | tar xz; }
    - export PATH=$BUILD_PREFIX/cython-$CYTHON_VERSION/bin:$PATH
    - export PYTHONPATH=$BUILD_PREFIX/cython-$CYTHON_VERSION:$PYTHONPATH
    # install dev rivet
    - echo "INSTALLING DEV RIVET AGAINST HEPMC2"
    - cd $BUILD_PREFIX/rivet
    - autoreconf -i
    - conf $RIVET_CONFFLAGS --with-yoda=$YODAPATH --with-hepmc=$HEPMCPATH --with-fastjet=$FASTJETPATH
    - mmi
    - cp rivetenv.sh rivetenv.csh $INSTALL_PREFIX/
    # setup env
    - source $INSTALL_PREFIX/rivetenv.sh
    - rivet -h
  artifacts:
    when: always
    paths:
      - local/
    expire_in: 1 week

build-hepmc3:
  stage: compile
  except:
    - schedules
  script:
    - cd ..
    - BUILD_PREFIX="$PWD"
    - INSTALL_PREFIX="${CI_PROJECT_DIR}/local"
    - MAKE="make -j3"
    - export CPPFLAGS="$CPPFLAGS -DNDEBUG"
    # immediate exit on a command (group) failure and optional debug mode
    - set -e
    - export PATH=$INSTALL_PREFIX/bin:$PATH
    - function conf { ./configure --prefix=$INSTALL_PREFIX "$@"; }
    - function mmi { $MAKE check "$@" && $MAKE install; }
    - function wget_untar { wget --no-check-certificate $1 -O- | tar --no-same-owner -xz; }
    - cd ${CI_PROJECT_DIR}
    # download pre-installed versions of HepMC2, FASTJET, FJcontrib and YODA
    #- wget_untar https://rivetval.web.cern.ch/rivetval/CI/FEDORA-30_HEPMC-2.06.10_FASTJET-3.3.3_FJCONTRIB-1.042_YODA-1-8-status2020-04-13.tar.gz
    # alternative download location:
    - wget_untar https://cgutscho.web.cern.ch/cgutscho/FEDORA-30_HEPMC-2.06.10_FASTJET-3.3.3_FJCONTRIB-1.042_YODA-1-8-status2020-04-13.tar.gz
    # install cython
    - echo "INSTALLING CYTHON $CYTHON_VERSION"
    - cd $BUILD_PREFIX
    - CYTHON_VERSION=0.28.5
    - test -d cython-$CYTHON_VERSION || { wget https://github.com/cython/cython/archive/$CYTHON_VERSION.tar.gz -O - | tar xz; }
    - export PATH=$BUILD_PREFIX/cython-$CYTHON_VERSION/bin:$PATH
    - export PYTHONPATH=$BUILD_PREFIX/cython-$CYTHON_VERSION:$PYTHONPATH
    # install dev rivet
    - echo "INSTALLING DEV RIVET AGAINST HEPMC3"
    - cd $BUILD_PREFIX/rivet
    - autoreconf -i
    - conf $RIVET_CONFFLAGS --with-yoda=$YODAPATH --with-hepmc3=/usr --with-fastjet=$FASTJETPATH
    - mmi
    - cp rivetenv.sh rivetenv.csh $INSTALL_PREFIX/
    # setup env
    - source $INSTALL_PREFIX/rivetenv.sh
    - rivet -h

check-plugin:
  stage: check
  except:
    - schedules
  script:
    - source local/rivetenv.sh
    - mkdir testArea
    - cd testArea
    - rivet-mkanalysis MY_TEST
    - rivet-build RivetMY_TEST.so MY_TEST.cc
    - rivet --pwd --list-analyses
    #- wget --no-check-certificate https://rivetval.web.cern.ch/rivetval/HEPMC/LHC-13-Top-All.hepmc.gz 
    # alternative download location:
    - wget --no-check-certificate https://cgutscho.web.cern.ch/cgutscho/LHC-13-Top-All.hepmc.gz 
    - rivet --pwd -a MY_TEST,MC_TTBAR:TTMODE=ANYLEP,ATLAS_2018_I1646686,ATLAS_2018_I1656578 -H ttbar_test_run.yoda LHC-13-Top-All.hepmc.gz
  artifacts:
    when: always
    paths:
      - local/
      - testArea/ttbar_test_run.yoda
    expire_in: 1 week
  dependencies:
    - build

make-plots:
  stage: validate
  except:
    - schedules
  script:
    - source local/rivetenv.sh
    - cd testArea
    - rivet-mkhtml --errs -o ttbar_test_plots ttbar_test_run.yoda
  artifacts:
    when: always
    paths:
      - testArea/ttbar_test_plots/
    expire_in: 1 week
  dependencies:
    - check-plugin

