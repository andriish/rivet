image: fedora:30

variables:
  #ATLAS_LOCAL_ROOT_BASE: /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SSL_NO_VERIFY: "true"
  SRC_DIR: src
  BUILD_DIR: build
  SRC_DIR_ABS: "${CI_PROJECT_DIR}/${SRC_DIR}"
  BUILD_DIR_ABS: "${CI_PROJECT_DIR}/${BUILD_DIR}"
  LD_LIBRARY_PATH: "/usr/local/lib"
  PYTHONPATH: "$PWD"
  HEPMC_VERSION: "2.06.10" 
  FASTJET_VERSION: "3.3.3"
  FJCONTRIB_VERSION: "1.044"
  CYTHON_VERSION: "0.29.15"


stages:
- compile
- check
- validate

before_script:
- dnf update -y
- dnf install -y make cmake gcc-c++ gcc-gfortran redhat-rpm-config m4 automake autoconf libtool
- dnf install -y wget tar less bzip2 findutils which nano zlib-devel git rsync file
- dnf install -y texlive-latex-bin texlive-texconfig-bin texlive-pst-tools texlive-pst-arrow
- dnf install -y ghostscript ImageMagick texlive-dvips texlive-relsize
- dnf install -y texlive-cm texlive-hyphen-base texlive-collection-fontsrecommended
- dnf clean all


#.build_template: &prep_template
#  stage: .pre
#  except:
#    - schedules
#  script:
#    - dnf install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-devel python${PYTHON_VERSION}-requests python${PYTHON_VERSION}-matplotlib 
#    - dnf clean all
#    - alias python='/usr/bin/python${PYTHON_VERSION}'
#    - shopt -s expand_aliases
#    - if [ "$VENV" = "yes" ] ; then python -m venv --system-site-packages ~/.venv ; source ~/.venv/bin/activate ; fi
#    - python --version
#    - cd ..
#    - BUILD_PREFIX="$PWD"
#    - INSTALL_PREFIX="${CI_PROJECT_DIR}/local${PYTHON_VERSION}"
#    - MAKE="make -j3"
#    - export CPPFLAGS="$CPPFLAGS -DNDEBUG"
#    # immediate exit on a command (group) failure and optional debug mode
#    - set -e
#    - export PATH=$INSTALL_PREFIX/bin:$PATH
#    - function conf { ./configure --prefix=$INSTALL_PREFIX "$@"; }
#    - function mmi { $MAKE "$@" && $MAKE install; }
#    - function wget_untar { wget --no-check-certificate $1 -O- | tar --no-same-owner -xz; }
#    - mkdir -p $INSTALL_PREFIX/etc/bash_completion.d
#    # install hepmc
#    - echo "INSTALLING HEPMC $HEPMC_VERSION"
#    - cd $BUILD_PREFIX
#    - test -d HepMC-$HEPMC_VERSION || wget_untar http://hepmc.web.cern.ch/hepmc/releases/hepmc$HEPMC_VERSION.tgz
#    - mkdir -p HepMC-$HEPMC_VERSION-build && cd HepMC-$HEPMC_VERSION-build
#    - cmake ../HepMC-$HEPMC_VERSION/ -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -Dmomentum=GEV -Dlength=MM
#    - mmi
#    - HEPMCPATH=$INSTALL_PREFIX
#    # install fastjet
#    - echo "INSTALLING FASTJET $FASTJET_VERSION"
#    - cd $BUILD_PREFIX
#    - test -d fastjet-$FASTJET_VERSION || wget_untar http://www.fastjet.fr/repo/fastjet-$FASTJET_VERSION.tar.gz
#    - cd fastjet-$FASTJET_VERSION
#    - conf --enable-shared --disable-auto-ptr --enable-allcxxplugins
#    - mmi
#    - FASTJETPATH=$INSTALL_PREFIX
#    # install fjcontrib
#    - echo "INSTALLING FASTJET CONTRIB $FJCONTRIB_VERSION"
#    - cd $BUILD_PREFIX
#    - test -d fastjet-$FJCONTRIB_VERSION || wget_untar http://fastjet.hepforge.org/contrib/downloads/fjcontrib-$FJCONTRIB_VERSION.tar.gz
#    - cd fjcontrib-$FJCONTRIB_VERSION
#    - ./configure --fastjet-config=$FASTJETPATH/bin/fastjet-config CXXFLAGS=-fPIC # fastjet-config already contains INSTALL_PREFIX
#    - mmi fragile-shared-install
#    # install cython
#    - echo "INSTALLING CYTHON $CYTHON_VERSION"
#    - cd $BUILD_PREFIX
#    - test -d cython-$CYTHON_VERSION || { wget https://github.com/cython/cython/archive/$CYTHON_VERSION.tar.gz -O - | tar xz; }
#    - export PATH=$BUILD_PREFIX/cython-$CYTHON_VERSION/bin:$PATH
#    - export PYTHONPATH=$BUILD_PREFIX/cython-$CYTHON_VERSION:$PYTHONPATH
#    # install dev yoda
#    - echo "INSTALLING DEV YODA"
#    - cd $BUILD_PREFIX
#    - test -d yoda || git clone https://gitlab.com/hepcedar/yoda.git yoda
#    - cd yoda
#    - git checkout origin/release-1-8
#    - autoreconf -i
#    - conf $YODA_CONFFLAGS
#    - mmi
#    - cp yodaenv.sh $INSTALL_PREFIX/yodaenv.sh
#    - echo "DEPENDENCIES BUILT SUCCESSFULLY."
#    - cd ${CI_PROJECT_DIR}
#    - tar czf local${PYTHON_VERSION}.tar.gz local${PYTHON_VERSION}
#  artifacts:
#    when: always
#    paths:
#      - local${PYTHON_VERSION}.tar.gz
#    expire_in: 1 week
#
#prep2:
#  variables:
#    VENV: "no"
#  <<: *prep_template
#
#prep3:
#  variables:
#    PYTHON_VERSION: "3"
#    PYTHON: python3
#    VENV: "yes"
#  <<: *prep_template


build:
  variables:
    PYTHON_VERSION: ""
    PYTHON: python
    VENV: "no"
  stage: compile
  except:
    - schedules
  script:
    - |
      if [ "${CI_PROJECT_DIR}" != "/builds/hepcedar/rivet" ]; then
        mkdir -p /builds/hepcedar/rivet
        ln -s "${CI_PROJECT_DIR}/local" "/builds/hepcedar/rivet/local"
      fi
    - dnf install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-devel python${PYTHON_VERSION}-requests python${PYTHON_VERSION}-matplotlib 
    - dnf clean all
    - alias python='/usr/bin/python${PYTHON_VERSION}'
    - shopt -s expand_aliases
    - if [ "$VENV" = "yes" ] ; then python -m venv --system-site-packages ~/.venv ; source ~/.venv/bin/activate ; fi
    - python --version
    - cd ..
    - BUILD_PREFIX="$PWD"
    - INSTALL_PREFIX="${CI_PROJECT_DIR}/local"
    - MAKE="make -j3"
    - export CPPFLAGS="$CPPFLAGS -DNDEBUG"
    # immediate exit on a command (group) failure and optional debug mode
    - set -e
    - export PATH=$INSTALL_PREFIX/bin:$PATH
    - function conf { ./configure --prefix=$INSTALL_PREFIX "$@"; }
    - function mmi { $MAKE check "$@" && $MAKE install; }
    - function wget_untar { wget --no-check-certificate $1 -O- | tar --no-same-owner -xz; }
    - cd ${CI_PROJECT_DIR}
    - echo "DOWNLOAD AND SET UP PREINSTALLATION"
    # download pre-installed versions of HepMC2, FASTJET, FJcontrib and YODA
    #- wget_untar https://rivetval.web.cern.ch/rivetval/CI/FEDORA30_PYTHON2_HEPMC20610_FASTJET333_FJCONTRIB1044_YODA18X-status2020-05-20.tar.gz
    # alternative download location:
    - wget_untar https://cgutscho.web.cern.ch/cgutscho/FEDORA30_PYTHON2_HEPMC20610_FASTJET333_FJCONTRIB1044_YODA18X-status2020-05-20.tar.gz
    # install cython
    - cd $BUILD_PREFIX
    - export HEPMCPATH=$INSTALL_PREFIX
    - export FASTJETPATH=$INSTALL_PREFIX
    - export YODAPATH=$INSTALL_PREFIX
    # install cython
    - echo "INSTALLING CYTHON $CYTHON_VERSION"
    - test -d cython-$CYTHON_VERSION || { wget https://github.com/cython/cython/archive/$CYTHON_VERSION.tar.gz -O - | tar xz; }
    - export PATH=$BUILD_PREFIX/cython-$CYTHON_VERSION/bin:$PATH
    - export PYTHONPATH=$BUILD_PREFIX/cython-$CYTHON_VERSION:$PYTHONPATH
    # install dev rivet
    - echo "INSTALLING DEV RIVET AGAINST HEPMC2"
    - cd $BUILD_PREFIX/rivet
    - autoreconf -i
    - conf $RIVET_CONFFLAGS --with-yoda=$YODAPATH --with-hepmc=$HEPMCPATH --with-fastjet=$FASTJETPATH
    - mmi
    - cp rivetenv.sh rivetenv.csh $INSTALL_PREFIX/
    # setup env
    - source $INSTALL_PREFIX/rivetenv.sh
    - rivet -h
  artifacts:
    when: always
    paths:
      - local${PYTHON_VERSION}/
    expire_in: 1 week


build-hepmc3:
  variables:
    PYTHON_VERSION: "3"
    PYTHON: python3
    VENV: "yes"
  stage: compile
  except:
    - schedules
  script:
    - |
      if [ "${CI_PROJECT_DIR}" != "/builds/hepcedar/rivet" ]; then
        mkdir -p /builds/hepcedar/rivet
        ln -s "${CI_PROJECT_DIR}/local${PYTHON_VERSION}" "/builds/hepcedar/rivet/local${PYTHON_VERSION}"
      fi
    - dnf install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-devel python${PYTHON_VERSION}-requests python${PYTHON_VERSION}-matplotlib 
    # The HepM3 from EPEL/Fedora is validated on regular basis.
    - dnf install -y HepMC3 HepMC3-devel HepMC3-search HepMC3-search-devel
    - dnf clean all
    - alias python='/usr/bin/python${PYTHON_VERSION}'
    - shopt -s expand_aliases
    - if [ "$VENV" = "yes" ] ; then python -m venv --system-site-packages ~/.venv ; source ~/.venv/bin/activate ; fi
    - python --version
    - cd ..
    - BUILD_PREFIX="$PWD"
    - INSTALL_PREFIX="${CI_PROJECT_DIR}/local${PYTHON_VERSION}"
    - MAKE="make -j3"
    - export CPPFLAGS="$CPPFLAGS -DNDEBUG"
    # immediate exit on a command (group) failure and optional debug mode
    - set -e
    - export PATH=$INSTALL_PREFIX/bin:$PATH
    - function conf { ./configure --prefix=$INSTALL_PREFIX "$@"; }
    - function mmi { $MAKE check "$@" && $MAKE install; }
    - function wget_untar { wget --no-check-certificate $1 -O- | tar --no-same-owner -xz; }
    - cd ${CI_PROJECT_DIR}
    - echo "DOWNLOAD AND SET UP PREINSTALLATION"
    # download pre-installed versions of HepMC2, FASTJET, FJcontrib and YODA
    #- wget_untar https://rivetval.web.cern.ch/rivetval/CI/FEDORA30_PYTHON3_HEPMC20610_FASTJET333_FJCONTRIB1044_YODA18X-status2020-05-20.tar.gz
    # alternative download location:
    - wget_untar https://cgutscho.web.cern.ch/cgutscho/FEDORA30_PYTHON3_HEPMC20610_FASTJET333_FJCONTRIB1044_YODA18X-status2020-05-20.tar.gz
    # install cython
    - cd $BUILD_PREFIX
    - export FASTJETPATH=$INSTALL_PREFIX
    - export YODAPATH=$INSTALL_PREFIX
    # install cython
    - echo "INSTALLING CYTHON $CYTHON_VERSION"
    - test -d cython-$CYTHON_VERSION || { wget https://github.com/cython/cython/archive/$CYTHON_VERSION.tar.gz -O - | tar xz; }
    - export PATH=$BUILD_PREFIX/cython-$CYTHON_VERSION/bin:$PATH
    - export PYTHONPATH=$BUILD_PREFIX/cython-$CYTHON_VERSION:$PYTHONPATH
    # install dev rivet
    - echo "INSTALLING DEV RIVET AGAINST HEPMC3"
    - cd $BUILD_PREFIX/rivet
    - autoreconf -i
    - conf $RIVET_CONFFLAGS --with-yoda=$YODAPATH --with-hepmc3=/usr --with-fastjet=$FASTJETPATH
    - mmi
    - cp rivetenv.sh rivetenv.csh $INSTALL_PREFIX/
    # setup env
    - source $INSTALL_PREFIX/rivetenv.sh
    - rivet -h
  artifacts:
    when: always
    paths:
      - local${PYTHON_VERSION}/
    expire_in: 1 week


check-plugin:
  variables:
    PYTHON_VERSION: ""
    PYTHON: python
    VENV: "no"
  stage: check
  except:
    - schedules
  script:
    - |
      if [ "${CI_PROJECT_DIR}" != "/builds/hepcedar/rivet" ]; then
        mkdir -p /builds/hepcedar/rivet
        ln -s "${CI_PROJECT_DIR}/local" "/builds/hepcedar/rivet/local"
      fi
    - dnf install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-devel python${PYTHON_VERSION}-requests python${PYTHON_VERSION}-matplotlib 
    - dnf clean all
    - alias python='/usr/bin/python${PYTHON_VERSION}'
    - shopt -s expand_aliases
    - ls
    - if [ "$VENV" = "yes" ] ; then python -m venv --system-site-packages ~/.venv ; source ~/.venv/bin/activate ; fi
    - python --version
    - export HEPMCPATH=$INSTALL_PREFIX
    - export FASTJETPATH=$INSTALL_PREFIX
    - export YODAPATH=$INSTALL_PREFIX
    - source local${PYTHON_VERSION}/rivetenv.sh
    - mkdir testArea${PYTHON_VERSION}
    - cd testArea${PYTHON_VERSION}
    - rivet-mkanalysis MY_TEST
    - rivet-build RivetMY_TEST.so MY_TEST.cc
    - rivet --pwd --list-analyses
    #- wget --no-check-certificate https://rivetval.web.cern.ch/rivetval/HEPMC/LHC-13-Top-All.hepmc.gz 
    # alternative download location:
    - wget --no-check-certificate https://cgutscho.web.cern.ch/cgutscho/LHC-13-Top-All.hepmc.gz 
    - rivet --pwd -a MC_TTBAR:TTMODE=ANYLEP,ATLAS_2017_I1614149,ATLAS_2018_I1646686,ATLAS_2018_I1656578 -H ttbar_test_run.yoda LHC-13-Top-All.hepmc.gz
  artifacts:
    when: always
    paths:
      - local${PYTHON_VERSION}/
      - testArea${PYTHON_VERSION}/ttbar_test_run.yoda
    expire_in: 1 week
  needs:
    - job: build
      artifacts: true

make-plots:
  variables:
    PYTHON_VERSION: ""
    PYTHON: python
    VENV: "no"
  stage: validate
  except:
    - schedules
  script:
    - |
      if [ "${CI_PROJECT_DIR}" != "/builds/hepcedar/rivet" ]; then
        mkdir -p /builds/hepcedar/rivet
        ln -s "${CI_PROJECT_DIR}/local" "/builds/hepcedar/rivet/local"
      fi
    - dnf install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-devel python${PYTHON_VERSION}-requests python${PYTHON_VERSION}-matplotlib 
    - dnf clean all
    - alias python='/usr/bin/python${PYTHON_VERSION}'
    - shopt -s expand_aliases
    - if [ "$VENV" = "yes" ] ; then python -m venv --system-site-packages ~/.venv ; source ~/.venv/bin/activate ; fi
    - python --version
    - export HEPMCPATH=$INSTALL_PREFIX
    - export FASTJETPATH=$INSTALL_PREFIX
    - export YODAPATH=$INSTALL_PREFIX
    - source local${PYTHON_VERSION}/rivetenv.sh
    - cd testArea${PYTHON_VERSION}
    - rivet-mkhtml --errs -o ttbar_test_plots ttbar_test_run.yoda
  artifacts:
    when: always
    paths:
      - testArea${PYTHON_VERSION}ttbar_test_plots/
    expire_in: 1 week
  needs:
    - job: check-plugin
      artifacts: true


check-plugin-py3:
  variables:
    PYTHON_VERSION: "3"
    PYTHON: python3
    VENV: "yes"
  stage: check
  except:
    - schedules
  script:
    - |
      if [ "${CI_PROJECT_DIR}" != "/builds/hepcedar/rivet" ]; then
        mkdir -p /builds/hepcedar/rivet
        ln -s "${CI_PROJECT_DIR}/local${PYTHON_VERSION}" "/builds/hepcedar/rivet/local${PYTHON_VERSION}"
      fi
    - dnf install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-devel python${PYTHON_VERSION}-requests python${PYTHON_VERSION}-matplotlib 
    - dnf install -y HepMC3 HepMC3-devel HepMC3-search HepMC3-search-devel
    - dnf clean all
    - alias python='/usr/bin/python${PYTHON_VERSION}'
    - shopt -s expand_aliases
    - if [ "$VENV" = "yes" ] ; then python -m venv --system-site-packages ~/.venv ; source ~/.venv/bin/activate ; fi
    - python --version
    - export HEPMCPATH=$INSTALL_PREFIX
    - export FASTJETPATH=$INSTALL_PREFIX
    - export YODAPATH=$INSTALL_PREFIX
    - source local${PYTHON_VERSION}/rivetenv.sh
    - mkdir testArea${PYTHON_VERSION}
    - cd testArea${PYTHON_VERSION}
    - rivet-mkanalysis MY_TEST
    - rivet-build RivetMY_TEST.so MY_TEST.cc
    - rivet --pwd --list-analyses
    #- wget --no-check-certificate https://rivetval.web.cern.ch/rivetval/HEPMC/LHC-13-Top-All.hepmc.gz 
    # alternative download location:
    - wget --no-check-certificate https://cgutscho.web.cern.ch/cgutscho/LHC-13-Top-All.hepmc.gz 
    - rivet --pwd -a MC_TTBAR:TTMODE=ANYLEP,ATLAS_2017_I1614149,ATLAS_2018_I1646686,ATLAS_2018_I1656578 -H ttbar_test_run.yoda LHC-13-Top-All.hepmc.gz
  artifacts:
    when: always
    paths:
      - local${PYTHON_VERSION}/
      - testArea${PYTHON_VERSION}/ttbar_test_run.yoda
    expire_in: 1 week
  needs:
    - job: build-hepmc3
      artifacts: true

make-plots-py3:
  variables:
    PYTHON_VERSION: "3"
    PYTHON: python3
    VENV: "yes"
  stage: validate
  except:
    - schedules
  script:
    - |
      if [ "${CI_PROJECT_DIR}" != "/builds/hepcedar/rivet" ]; then
        mkdir -p /builds/hepcedar/rivet
        ln -s "${CI_PROJECT_DIR}/local${PYTHON_VERSION}" "/builds/hepcedar/rivet/local${PYTHON_VERSION}"
      fi
    - dnf install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-devel python${PYTHON_VERSION}-requests python${PYTHON_VERSION}-matplotlib 
    - dnf install -y HepMC3 HepMC3-devel HepMC3-search HepMC3-search-devel
    - dnf clean all
    - alias python='/usr/bin/python${PYTHON_VERSION}'
    - shopt -s expand_aliases
    - if [ "$VENV" = "yes" ] ; then python -m venv --system-site-packages ~/.venv ; source ~/.venv/bin/activate ; fi
    - python --version
    - export HEPMCPATH=$INSTALL_PREFIX
    - export FASTJETPATH=$INSTALL_PREFIX
    - export YODAPATH=$INSTALL_PREFIX
    - source local${PYTHON_VERSION}/rivetenv.sh
    - cd testArea${PYTHON_VERSION}
    - rivet-mkhtml --errs -o ttbar_test_plots ttbar_test_run.yoda
  artifacts:
    when: always
    paths:
      - testArea${PYTHON_VERSION}/ttbar_test_plots/
    expire_in: 1 week
  needs:
    - job: check-plugin-py3
      artifacts: true

