variables:
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SSL_NO_VERIFY: "true"


stages:
- compile
- precheck
- check
- validate
- webpage


.build_template: &build_template
  image:
    hepstore/hepbase-$ARCH
  stage: compile
  script:
    - shopt -s expand_aliases
    - set -e
    - BUILD_PREFIX="$CI_PROJECT_DIR"
    - MAKE="make -j $(nproc)"
    #/build_$ARCH"
    - mkdir -p $BUILD_PREFIX
    - INSTALL_PREFIX="$CI_PROJECT_DIR/local_$ARCH"
    - mkdir -p $INSTALL_PREFIX
    - TEST_PREFIX="$CI_PROJECT_DIR/test_$ARCH"
    - mkdir -p $TEST_PREFIX
    ## Build the core library
    # - export CPPFLAGS="$CPPFLAGS -DNDEBUG"
    #- export PATH=$INSTALL_PREFIX/bin:$PATH
    ## Build YODA
    - git clone --depth 1 --branch release-1-9-x https://gitlab.com/hepcedar/yoda.git yoda/
    - cd yoda/
    - autoreconf -i
    - ./configure --prefix=$INSTALL_PREFIX
    - $MAKE
    - $MAKE install
    - cp yodaenv.sh $INSTALL_PREFIX/
    - cd ..
    ## Build Rivet
    - autoreconf -i
    - cd $BUILD_PREFIX
    - if [[ "$ALLANAS" != "1" ]]; then ANAOPT="--disable-analyses"; fi
    - CONF="./configure --prefix=$INSTALL_PREFIX $ANAOPT --with-yoda=$INSTALL_PREFIX --with-hepmc=/usr/local --with-fastjet=/usr/local"
    - if (echo $ARCH | grep -q hepmc3); then CONF=${CONF/with-hepmc/with-hepmc3}; fi
    - echo $CONF
    - $CONF
    - $MAKE RIVET_BUILD_ALLCAT=1
    # - echo @$LD_LIBRARY_PATH@
    - $MAKE check || (cat test/test-suite.log && false)
    - $MAKE install
    - cp rivetenv.sh $INSTALL_PREFIX/
    ## Basic testing
    - echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
    - echo "PYTHONPATH = $PYTHONPATH"
    - python --version
    - ls /etc/profile.d || true
    - root-config --prefix || true
    - cat $INSTALL_PREFIX/yodaenv.sh
    - source $INSTALL_PREFIX/yodaenv.sh
    - cat $INSTALL_PREFIX/rivetenv.sh
    - source $INSTALL_PREFIX/rivetenv.sh
    - rivet -h
    - |
      if [[ "$ALLANAS" != "1" ]]; then
        ./ci/getAffectedRoutines.sh anasToCompile.txt
        echo "==== echo analyses to compile ====="
        cat anasToCompile.txt
        find analyses | grep MC_TTBAR | grep cc  >> anasToCompile.txt # need at least one!
        cat anasToCompile.txt | sort --unique > anasToCompile.tmp ; mv anasToCompile.tmp anasToCompile.txt
        echo rivet-build `cat anasToCompile.txt`
        RIVET_BUILD_NOCAT=1 rivet-build RivetModifiedAnas.so `cat anasToCompile.txt`
        mkdir -p ${CI_PROJECT_DIR}/local${PYTHON_VERSION}/lib/Rivet/.
        mkdir -p ${CI_PROJECT_DIR}/local${PYTHON_VERSION}/share/Rivet/.
        cp RivetModifiedAnas.so ${CI_PROJECT_DIR}/local${PYTHON_VERSION}/lib/Rivet/.
        while read p ; do cp ${p/%.cc}* ${CI_PROJECT_DIR}/local${PYTHON_VERSION}/share/Rivet/. ; done < anasToCompile.txt
        rm ${CI_PROJECT_DIR}/local${PYTHON_VERSION}/share/Rivet/*cc
      fi
    - find $CI_PROJECT_DIR
    # - ls $CI_PROJECT_DIR

  artifacts:
    when: always
    paths:
      # - ${CI_PROJECT_DIR}/local_$ARCH/
      # - ${CI_PROJECT_DIR}/test_$ARCH/
      # - ${CI_PROJECT_DIR}/Make*
      # - ${CI_PROJECT_DIR}/config.log
      - config.log
      - test/
      - local_$ARCH/
      - test_$ARCH/
    expire_in: 36 hrs



build_ubuntu_gcc_hepmc3_py3:
  variables:
    ARCH: ubuntu-gcc-hepmc3-py3
  <<: *build_template

build_ubuntu_clang_hepmc3_py3:
  variables:
    ARCH: ubuntu-clang-hepmc3-py3
  <<: *build_template

build_fedora_gcc_hepmc3_py3:
  variables:
    ARCH: fedora-gcc-hepmc3-py3
  #only: [schedules]
  <<: *build_template

# build_ubuntu_intel_hepmc3_py3:
#   tags: [intel-compat]
#   variables:
#     ARCH: ubuntu-intel-hepmc3-py3
#   only: [schedules]
#   <<: *build_template


# build_ubuntu_gcc_hepmc2_py3:
#   variables:
#     ARCH: ubuntu-gcc-hepmc2-py3
#   <<: *build_template

# build_ubuntu_clang_hepmc2_py3:
#   variables:
#     ARCH: ubuntu-clang-hepmc2-py3
#   <<: *build_template

# build_ubuntu_intel_hepmc2_py3:
#   tags: [intel-compat]
#   variables:
#     ARCH: ubuntu-intel-hepmc2-py3
#   only: [schedules]
#   <<: *build_template

# build_ubuntu_gcc_hepmc3_py2:
#   variables:
#     ARCH: ubuntu-gcc-hepmc3-py2
#   #only: [schedules]
#   <<: *build_template

# build_fedora_gcc_hepmc2_py3:
#   variables:
#     ARCH: fedora-gcc-hepmc2-py3
#   <<: *build_template

# build_ubuntu_gcc_hepmc2_py2:
#   variables:
#     ARCH: ubuntu-gcc-hepmc2-py2
#   <<: *build_template


get_test_hepmc:
  image:
    jgoclawski/wget
  stage: precheck
  script:
    - URL1=https://rivetval.web.cern.ch/rivetval/HEPMC/LHC-13-Top-All.hepmc.gz
    - URL2=https://cgutscho.web.cern.ch/cgutscho/LHC-13-Top-All.hepmc.gz
    - for u in $URL1 $URL2; do wget --no-check-certificate $u -O tt.hepmc.gz && break; done
    -  mkdir -p valhepmc
   # - | #takes up too much space  to be uploaded as an artifact sadly :(
   #   if [[ "$VAL" == "1" ]]; then
   #     URL1=https://rivetval.web.cern.ch/rivetval/HEPMC/
   #     URL2=https://cgutscho.web.cern.ch/cgutscho/
   #     for u in $URL1 $URL2; do wget -q --no-check-certificate $u -O list.txt && break; done
   #     while read p ; do
   #       a=${p#<*href=\"} ; b=${a%\"*}
   #       if echo ${b} | grep gz ; then
   #         echo $b
   #         for u in $URL1 $URL2; do wget -q  --no-check-certificate $u/$b -O valhepmc/$b  && break; done
   #       fi
   #     done < list.txt
   #   fi
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/tt.hepmc.gz
      - $CI_PROJECT_DIR/valhepmc
    expire_in: 36 hrs


.check_plugin_template: &check_plugin_template
  image:
    hepstore/hepbase-$ARCH
  stage: check
  script:
    - INSTALL_PREFIX="$CI_PROJECT_DIR/local_$ARCH"
    - TEST_PREFIX="$CI_PROJECT_DIR/test_$ARCH"
    - VAL_PREFIX="$CI_PROJECT_DIR/val_$ARCH"
    - mkdir -p $VAL_PREFIX
    - source $INSTALL_PREFIX/rivetenv.sh
    - cd $TEST_PREFIX
    ## Identify changed routines + a few standard ones for CI tests
    - echo $ALLANAS
    - |
      if [[ "$ALLANAS" != "1" ]]; then
        $CI_PROJECT_DIR/ci/getAffectedRoutines.sh $CI_PROJECT_DIR/anasToCompile.txt
        find $CI_PROJECT_DIR/analyses | grep MC_TTBAR | grep cc  >> $CI_PROJECT_DIR/anasToCompile.txt
        find $CI_PROJECT_DIR/analyses | grep ATLAS_2018_I1656578 | grep cc  >> $CI_PROJECT_DIR/anasToCompile.txt
        find $CI_PROJECT_DIR/analyses | grep ATLAS_2018_I1646686 | grep cc  >> $CI_PROJECT_DIR/anasToCompile.txt
        find $CI_PROJECT_DIR/analyses | grep ATLAS_2017_I1614149 | grep cc  >> $CI_PROJECT_DIR/anasToCompile.txt
        sort --unique $CI_PROJECT_DIR/anasToCompile.txt -o $CI_PROJECT_DIR/anasToCompile.txt
        cat $CI_PROJECT_DIR/anasToCompile.txt
        ## Build changed routines
        rivet-build RivetModifiedAnas.so `cat $CI_PROJECT_DIR/anasToCompile.txt`
        mkdir -p $INSTALL_PREFIX/lib/Rivet
        mkdir -p $INSTALL_PREFIX/share/Rivet
        cp RivetModifiedAnas.so $INSTALL_PREFIX/lib/Rivet/
        cat $CI_PROJECT_DIR/anasToCompile.txt | while read p; do cp ${p/%.cc}* $INSTALL_PREFIX/share/Rivet/; done
      fi
    ## Test analysis loading and listing
    - rivet --list-analyses
    - rivet-mkanalysis MY_TEST
    - rivet-build MY_TEST.cc
    - rivet --pwd --list-analyses
    ## Test standard analyses on a small event sample
    - rivet --pwd -a MC_TTBAR:TTMODE=ANYLEP,ATLAS_2017_I1614149,ATLAS_2018_I1646686,ATLAS_2018_I1656578 -H ttbar_test_run.yoda $CI_PROJECT_DIR/tt.hepmc.gz
    - | #monthly full validation only... SLOW!
      if [[ "$VAL" == "1" ]]; then
        if [[ "$ARCH" == "ubuntu-gcc-hepmc3-py3" ]]; then
          cd $VAL_PREFIX
          rivet-mkvaldir VALDIR --ref-dir $CI_PROJECT_DIR/analyses/valref/
          cd VALDIR
          make check -j $(nproc)
          ls *diff > diffs.txt
          while read  p; do echo "==== $p ====" ; if [ -s "$p" ]; then echo "fail" ; exit 1 ; else echo "ok";  fi ; done < diffs.txt
        fi
      fi
  artifacts:
    when: always
    paths:
      - local_$ARCH/
      - test_$ARCH/
      - val_$ARCH/VALDIR/Make*
      - val_$ARCH/VALDIR/*.yoda
      - val_$ARCH/VALDIR/*.html
      - val_$ARCH/VALDIR/*.diff
      - val_$ARCH/VALDIR/tmp/*.log
      - val_$ARCH/VALDIR/*_*_*/*.*
    #exclude:
    #  - test_$ARCH/VALDIR/*/*.gz
    expire_in: 36 hrs


check_plugin_ubuntu_gcc_hepmc3_py3:
  variables:
    ARCH: ubuntu-gcc-hepmc3-py3
  needs: [build_ubuntu_gcc_hepmc3_py3, get_test_hepmc]
  <<: *check_plugin_template

check_plugin_ubuntu_clang_hepmc3_py3:
  variables:
    ARCH: ubuntu-clang-hepmc3-py3
  needs: [build_ubuntu_clang_hepmc3_py3, get_test_hepmc]
  <<: *check_plugin_template

check_plugin_fedora_gcc_hepmc3_py3:
  variables:
    ARCH: fedora-gcc-hepmc3-py3
  #only: [schedules]
  needs: [build_fedora_gcc_hepmc3_py3, get_test_hepmc]
  <<: *check_plugin_template

# check_plugin_ubuntu_intel_hepmc3_py3:
#   tags: [intel-compat]
#   variables:
#     ARCH: ubuntu-intel-hepmc3-py3
#   only: [schedules]
#   needs: [build_ubuntu_intel_hepmc3_py3, get_test_hepmc]
#   <<: *check_plugin_template


# check_plugin_ubuntu_gcc_hepmc2_py3:
#   variables:
#     ARCH: ubuntu-gcc-hepmc2-py3
#   needs: [build_ubuntu_gcc_hepmc2_py3, get_test_hepmc]
#   <<: *check_plugin_template

# check_plugin_ubuntu_clang_hepmc2_py3:
#   variables:
#     ARCH: ubuntu-clang-hepmc2-py3
#   needs: [build_ubuntu_clang_hepmc2_py3, get_test_hepmc]
#   <<: *check_plugin_template

# check_plugin_ubuntu_gcc_hepmc3_py2:
#   variables:
#     ARCH: ubuntu-gcc-hepmc3-py2
#   #only: [schedules]
#   needs: [build_ubuntu_gcc_hepmc3_py2, get_test_hepmc]
#   <<: *check_plugin_template

# check_plugin_fedora_gcc_hepmc2_py3:
#   variables:
#     ARCH: fedora-gcc-hepmc2-py3
#   needs: [build_fedora_gcc_hepmc2_py3, get_test_hepmc]
#   <<: *check_plugin_template

# check_plugin_ubuntu_gcc_hepmc2_py2:
#   variables:
#     ARCH: ubuntu-gcc-hepmc2-py2
#   needs: [build_ubuntu_gcc_hepmc2_py2, get_test_hepmc]
#   <<: *check_plugin_template




.make_plots_template: &make_plots_template
  image:
    hepstore/hepbase-$ARCH-latex
  stage: validate
  script:
    - INSTALL_PREFIX="$CI_PROJECT_DIR/local_$ARCH"
    - TEST_PREFIX="$CI_PROJECT_DIR/test_$ARCH"
    - source $INSTALL_PREFIX/yodaenv.sh
    - source $INSTALL_PREFIX/rivetenv.sh
    - cd $TEST_PREFIX
    - ls /usr/local/lib64
    - echo $LD_LIBRARY_PATH
    - rivet-mkhtml --errs -o ttbar_test_plots ttbar_test_run.yoda
  artifacts:
    when: always
    paths:
      - test_$ARCH/ttbar_test_plots/
    expire_in: 36 hrs
  artifacts:
    when: always
    paths:
      - test_$ARCH/ttbar_test_plots
    expire_in: 36 hrs



make_plots_ubuntu_gcc_hepmc3_py3:
  variables:
    ARCH: ubuntu-gcc-hepmc3-py3
  #only: [schedules]
  needs: [check_plugin_ubuntu_gcc_hepmc3_py3]
  <<: *make_plots_template

make_plots_ubuntu_clang_hepmc3_py3:
  variables:
    ARCH: ubuntu-clang-hepmc3-py3
  only: [schedules]
  needs: [check_plugin_ubuntu_clang_hepmc3_py3]
  <<: *make_plots_template

make_plots_fedora_gcc_hepmc3_py3:
  variables:
    ARCH: fedora-gcc-hepmc3-py3
  #only: [schedules]
  needs: [check_plugin_fedora_gcc_hepmc3_py3]
  <<: *make_plots_template

# make_plots_ubuntu_intel_hepmc3_py3:
#   tags: [intel-compat]
#   variables:
#     ARCH: ubuntu-intel-hepmc3-py3
#   only: [schedules]
#   needs: [check_plugin_ubuntu_intel_hepmc3_py3]
#   <<: *make_plots_template


# make_plots_ubuntu_gcc_hepmc2_py3:
#   variables:
#     ARCH: ubuntu-gcc-hepmc2-py3
#   only: [schedules]
#   needs: [check_plugin_ubuntu_gcc_hepmc2_py3]
#   <<: *make_plots_template

# make_plots_ubuntu_clang_hepmc2_py3:
#   variables:
#     ARCH: ubuntu-clang-hepmc2-py3
#   only: [schedules]
#   needs: [check_plugin_ubuntu_clang_hepmc2_py3]
#   <<: *make_plots_template

# make_plots_ubuntu_intel_hepmc2_py3:
#   tags: [intel-compat]
#   variables:
#     ARCH: ubuntu-intel-hepmc2-py3
#   only: [schedules]
#   needs: [check_plugin_ubuntu_intel_hepmc2_py3]
#   <<: *make_plots_template

# make_plots_ubuntu_gcc_hepmc3_py2:
#   variables:
#     ARCH: ubuntu-gcc-hepmc3-py2
#   #only: [schedules]
#   needs: [check_plugin_ubuntu_gcc_hepmc3_py2]
#   <<: *make_plots_template

# make_plots_fedora_gcc_hepmc2_py3:
#   variables:
#     ARCH: fedora-gcc-hepmc2-py3
#   needs: [check_plugin_fedora_gcc_hepmc2_py3]
#   <<: *make_plots_template

# make_plots_ubuntu_gcc_hepmc2_py2:
#   variables:
#     ARCH: ubuntu-gcc-hepmc2-py2
#   needs: [check_plugin_ubuntu_gcc_hepmc2_py2]
#   <<: *make_plots_template


analysis:
  variables:
    ARCH: ubuntu-gcc-hepmc3-py3
  needs: [build_ubuntu_gcc_hepmc3_py3]
  stage: webpage
  script:
    - BUILD_PREFIX="$CI_PROJECT_DIR"
    - INSTALL_PREFIX="$CI_PROJECT_DIR/local_$ARCH"
    - source $INSTALL_PREFIX/yodaenv.sh
    - source $INSTALL_PREFIX/rivetenv.sh
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$INSTALL_PREFIX/local_$ARCH/lib
    - ./$BUILD_PREFIX/doc/analists/mk-analysis-mdfinal
  artifacts:
    untracked: true
    expire_in: 2 hrs
